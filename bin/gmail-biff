#!/usr/local/bin/racket -tm
#lang racket

(require
 openssl/mzssl
 net/imap
 net/head
 net/mime)

(provide main)

(define (biff-connect imap-server imap-port username password mailbox)
  (let ([c (ssl-make-client-context)])
    (let-values ([(in out) (ssl-connect imap-server imap-port c)])
      ;; (displayln username)
      ;; (displayln password)
      ;; (displayln mailbox)
      (imap-connect* in out username password mailbox))))

(define (default-string string default)
  (or (and string (not (zero? (string-length string))) string)
      default))

(define (q-notify string)
  (string-append "\\" string))

(define (notify title subtitle message url)
  (let* ((args
          (list "/usr/local/bin/terminal-notifier"
                "-title" title
                "-message" message
                "-sender" "com.apple.Mail"))
         (args
          (if subtitle
              (append args (list "-subtitle" subtitle))
              args))
         (args
          (if url
              (append args (list "-open" url))
              (append args (list "-activate" "org.gnu.Emacs")))))
    (apply system* args)))

(define (biff-notify from to subject url)
  (notify (q-notify (default-string from "sender"))
          (q-notify to)
          (q-notify (default-string subject "subject"))
          url))

(define (all-the-headers raw)
  (extract-all-fields (caar raw)))

(define (the-headers raw)
  (filter-map (lambda (x)
                (let ((s (string->symbol (string-downcase (bytes->string/utf-8 (car x))))))
                  (and (memq s '(from to subject))
                       (cons s (bytes->string/utf-8 (cdr x))))))
              (all-the-headers raw)))

(define (the-body raw)
  (call-with-output-string
    (let* ((message (mime-analyze (caar raw)))
           (type    (entity-type (message-entity message)))
           (parts   (entity-parts (message-entity message))))
      (if (and (eq? type 'multipart) parts)
          (car (filter-map (lambda (x)
                             (and (eq? (entity-type (message-entity x)) 'text)
                                  (eq? (entity-subtype (message-entity x)) 'plain)
                                  (entity-body (message-entity x))))
                           parts))
          (entity-body (message-entity message))))))

(define (constantly x)
  (lambda _ x))

(define (truthy _)
  #t)

(define-syntax shh
  (syntax-rules ()
    ((_ body ...)
     (with-handlers
      ((truthy (lambda (e) #f)))
      body ...))))

(define-syntax shh3
  (syntax-rules ()
    ((_ body ...)
     (with-handlers
      ((truthy (lambda (e) (values #f 0 0))))
      body ...))))

(define (biff-fetch username url imap n m)
  (for-each (lambda (x)
              ;; (displayln x)
              (biff-notify (dict-ref x 'from)
                           username
                           (dict-ref x 'subject)
                           url))
            (map (lambda (x)
                   (the-headers (imap-get-messages imap (list x) '(header))))
                 (map add1 (range n m)))))

(define (poll-loop imap-server imap-port username password mailbox url)
  (let lp ((seen 0) (just-count #t))
    (define-values (imap messages _recent)
      (shh3 (biff-connect imap-server imap-port username password mailbox)))
    (let ((count (- messages seen)))
      (if just-count
          (notify "starting"
                  username
                  (string-append (number->string count)
                                 (if (= count 1) " message in " " messages in ")
                                 mailbox)
                  #f)
          (when (> count 0)
            (shh (biff-fetch username url imap seen messages)))))
    (sleep 120)
    (shh (imap-disconnect imap))
    (lp messages #f)))

(define (main)
  (for-each (lambda (t)
              (thread-wait t))
            (map (lambda (args)
                   (thread
                    (lambda ()
                      (apply poll-loop args))))
                 `(("imap.gmail.com" 993
                    ,(getenv "MAILUSER")
                    ,(getenv "MAILPASS")
                    "INBOX"
                    #f)))))

;; Local Variables:
;; mode: scheme
;; End:
